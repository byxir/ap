// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id           String              @id @default(cuid())
    name         String
    email        String?             @unique
    image        String?
    accounts     Account[]
    sessions     Session[]
    socials      Social[]
    club         Club?               @relation(fields: [clubId], references: [id])
    clubId       String              @default("")
    clubName     String              @default("")
    performances PlayerPerformance[]
    badges       Badge[]
    pts          Int                 @default(0)
    mainLegend   Int                 @default(0)
    kd           Decimal             @default(0.00)
    totalKills   Int                 @default(0)
    role         Role                @default(USER)

    @@index([clubId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//---------------------------------------------------------------
//---------------------------------------------------------------

model Scrim {
    id          String      @id @default(cuid())
    image       String
    title       String
    description String?
    date        DateTime
    averageRank Int
    status      ScrimStatus @default(SCHEDULED)

    Matches Match[]
}

model Match {
    id               String            @id @default(cuid())
    teamPerformances teamPerformance[]
    Scrim            Scrim?            @relation(fields: [scrimId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    scrimId          String?

    @@index([scrimId])
}

model teamPerformance {
    id                 String              @id @default(cuid())
    Match              Match?              @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    matchId            String?
    placement          Int
    killsTotal         Int
    playerPerformances PlayerPerformance[]

    @@index([matchId])
}

model PlayerPerformance {
    id              String          @id @default(cuid())
    team            teamPerformance @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    teamId          String
    Player          User?           @relation(fields: [playerId], references: [id])
    playerId        String?
    kills           Int
    ptsDelta        Int
    characterPlayed Int

    @@index([playerId])
    @@index([id])
    @@index([teamId])
}

//---------------------------------------------------------------
//---------------------------------------------------------------

model Club {
    id         String  @id @default(cuid())
    name       String  @unique
    image      String
    inviteOnly Boolean

    members User[]
}

model Badge {
    id String @id @default(cuid())

    text       String
    image      String
    difficulty Int
    howToGet   String?
    Player     User?   @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    playerId   String?

    @@index([playerId])
}

model Social {
    id String @id @default(cuid())

    link     String
    Player   User?  @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    playerId String

    @@index([playerId])
}

enum Role {
    USER
    ADMIN
}

enum ScrimStatus {
    PAST
    ONGOING
    SCHEDULED
}
