// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//---------------------------------------------------------------
//---------------------------------------------------------------

model Scrim {
    id          String   @id @default(cuid())
    image       String
    title       String
    description String?
    date        DateTime
    averageRank Int

    Matches Match[]
}

model Match {
    matchId String @id @default(cuid())

    performances teamPerformance[]
    Scrim        Scrim?            @relation(fields: [scrimId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    scrimId      String?

    @@index([scrimId])
}

model teamPerformance {
    teamPerformanceId String  @id @default(cuid())
    Match             Match?  @relation(fields: [matchId], references: [matchId], onDelete: Cascade, onUpdate: Cascade)
    matchId           String?

    placement          Int
    killsTotal         Int
    playerPerformances PlayerPerformance[]

    @@index([matchId])
}

model PlayerPerformance {
    playerPerformanceId String          @id @default(cuid())
    team                teamPerformance @relation(fields: [playerPerformanceId], references: [teamPerformanceId], onDelete: Cascade, onUpdate: Cascade)
    Player              Player?         @relation(fields: [playerId], references: [playerId])
    playerId            String?
    kills               Int
    ptsDelta            Int
    characterPlayed     Int

    @@index([playerId])
    @@index([playerPerformanceId])
}

//---------------------------------------------------------------
//---------------------------------------------------------------

model Player {
    playerId     String              @id @default(cuid())
    name         String
    originName   String              @unique
    club         Club                @relation(fields: [playerId], references: [id])
    performances PlayerPerformance[]
    pts          Int
    mainLegend   Int

    achievements Achievement[]

    @@index([playerId])
}

model Club {
    id    String @id @default(cuid())
    name  String @unique
    image String

    members Player[]
}

model Achievement {
    id String @id @default(cuid())

    text           String
    image          String
    difficulty     Int
    Player         Player? @relation(fields: [id], references: [playerId], onDelete: Cascade, onUpdate: Cascade)
    playerPlayerId String?

    @@index([id])
}

enum Role {
    USER
    ADMIN
}
